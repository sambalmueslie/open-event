plugins {
    id("org.jetbrains.kotlin.jvm")
    id("org.jetbrains.kotlin.kapt")
    id("org.jetbrains.kotlin.plugin.allopen")
    id("org.sonarqube") version "3.5.0.2730"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("application")
    id("com.google.cloud.tools.jib") version "3.3.1"
}

apply plugin: 'jacoco'
apply plugin: 'org.sonarqube'

version "0.1"
group "de.sambalmueslie.openevent"

repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    kapt(platform("io.micronaut:micronaut-bom:3.8.4"))
    kapt("io.micronaut:micronaut-inject-java")
    kapt("io.micronaut:micronaut-validation")
    kapt("io.micronaut:micronaut-graal")

    implementation(platform("io.micronaut:micronaut-bom:3.8.4"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.10")
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.8.10")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.8.10")
    implementation("org.jetbrains.kotlin:kotlin-reflect:1.8.10")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")

    // data
    kapt("io.micronaut.data:micronaut-data-processor")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    compileOnly("jakarta.persistence:jakarta.persistence-api:3.1.0")
    testImplementation(platform("org.testcontainers:testcontainers-bom:1.17.6"))
    testRuntimeOnly("org.testcontainers:postgresql")
    runtimeOnly("org.postgresql:postgresql")

    // security
    kapt("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-oauth2")

    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:2.14.2")

    // flyway
    implementation("io.micronaut.flyway:micronaut-flyway")

    // test
    kaptTest(platform("io.micronaut:micronaut-bom:3.8.3"))
    kaptTest("io.micronaut:micronaut-inject-java")
    testCompile platform("io.micronaut:micronaut-bom:3.8.4")
    testCompile "io.micronaut.test:micronaut-test-kotlintest"
    testCompile "io.kotlintest:kotlintest-runner-junit5:3.4.2"
    testCompile("io.micronaut.test:micronaut-test-junit5")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.9.2")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.9.2")
    testImplementation "io.mockk:mockk:1.13.4"

    // graalvm
    compileOnly("org.graalvm.nativeimage:svm")


    runtimeOnly("ch.qos.logback:logback-classic")

    // keycloak
    compile("org.keycloak:keycloak-common:20.0.3")
    compile("org.keycloak:keycloak-core:21.0.0")
}

mainClassName = "de.sambalmueslie.openevent.server.OpenEventApplication"

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

shadowJar {
    baseName = rootProject.name
    mergeServiceFiles()
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
}

// use JUnit 5 platform
test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

sonarqube {
    properties {
        property "sonar.projectKey", "sambalmueslie_open-event"
        property "sonar.organization", "sambalmueslie"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.jacoco.reportPath", "${project.buildDir}/reports/jacoco/test"
    }
}

jacocoTestReport {
    reports {
        xml.setEnabled(true)
        csv.setEnabled(false)
    }
}

allOpen {
    annotation("io.micronaut.aop.Around")
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}
