plugins {
    id "org.jetbrains.kotlin.jvm"
    id "org.jetbrains.kotlin.kapt"
    id "org.jetbrains.kotlin.plugin.allopen"
    id "application"
    id "com.google.cloud.tools.jib"
    id 'com.github.johnrengelman.shadow'
}

version "0.1"
group "de.sambalmueslie"


repositories {
    mavenCentral()
    jcenter()
}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    kapt(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kapt("io.micronaut:micronaut-inject-java")
    kapt("io.micronaut:micronaut-validation")
    kapt("io.micronaut:micronaut-graal")

    kapt("io.micronaut.configuration:micronaut-openapi")
    kapt("io.micronaut.security:micronaut-security-annotations")

    implementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    implementation("io.micronaut:micronaut-inject")
    implementation("io.micronaut:micronaut-validation")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}")
    implementation("org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}")
    implementation("io.micronaut.kotlin:micronaut-kotlin-runtime")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-server-netty")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.swagger.core.v3:swagger-annotations")

    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")

    kapt("io.micronaut.data:micronaut-data-processor")
    implementation("org.hibernate:hibernate-jcache:5.4.25.Final")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.data:micronaut-data-hibernate-jpa")
    runtimeOnly("org.postgresql:postgresql")

    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.graphql:micronaut-graphql")
    implementation("io.micronaut.kotlin:micronaut-kotlin-extension-functions")
    implementation("io.micronaut.cache:micronaut-cache-ehcache")
    runtimeOnly("com.fasterxml.jackson.module:jackson-module-kotlin:2.12.0")


    kaptTest(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    kaptTest("io.micronaut:micronaut-inject-java")

    testImplementation(platform("io.micronaut:micronaut-bom:$micronautVersion"))
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("io.micronaut.test:micronaut-test-junit5")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine")
    testImplementation(platform("org.testcontainers:testcontainers-bom:1.15.0"))
    testRuntimeOnly("org.testcontainers:postgresql")
//    testImplementation ("com.h2database:h2")

    implementation("org.apache.logging.log4j:log4j-core:2.14.0")
    runtimeOnly("org.apache.logging.log4j:log4j-api:2.14.0")
    runtimeOnly("org.apache.logging.log4j:log4j-slf4j-impl:2.14.0")


    testImplementation "io.mockk:mockk:1.10.3-jdk8"
}

test.classpath += configurations.developmentOnly

mainClassName = "de.sambalmueslie.oevent.Application"

// use JUnit 5 platform
test {
    useJUnitPlatform()
}

java {
    sourceCompatibility = JavaVersion.toVersion('11')
}

allOpen {
    annotation("io.micronaut.aop.Around")
}
compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}


jib.to.image = 'gcr.io/OpenEvent/jib-image'

shadowJar {
    mergeServiceFiles()
    archiveBaseName.set('open-event')
}

tasks.withType(JavaExec) {
    classpath += configurations.developmentOnly
    jvmArgs('-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
}

